name: Unit 8 – Alerts + Prompts Autograding
'on':
  - push
  - pull_request
  - workflow_dispatch

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ---- Test 1: convertTemp() ----
      - name: 'convertTemp() – 212°F → "Temperature in Celsius: 100.00"'
        id: test_convert_temp
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'convertTemp() – 212°F → "Temperature in Celsius: 100.00"'
          setup-command: echo "No setup"
          command: >
            node -e "
              // stub prompt/alert
              global.__prompts = [];
              global.prompt = (msg) => { global.__prompts.push(String(msg)); return '212'; };
              global.__alerts = [];
              global.alert  = (msg) => { global.__alerts.push(String(msg)); };

              // load student code into GLOBAL scope (no exports required)
              const fs = require('fs');
              const vm = require('vm');
              global.window = global;
              const code = fs.readFileSync('script.js', 'utf8');
              vm.runInThisContext(code, { filename: 'script.js' });

              // call & assert
              if (typeof convertTemp !== 'function') { console.error('convertTemp() not found'); process.exit(1); }
              convertTemp();

              const expectedPrompt = 'Enter temperature in Fahrenheit';
              const expectedAlert  = 'Temperature in Celsius: 100.00';

              if (!global.__prompts.includes(expectedPrompt)) { console.error('Bad prompt', global.__prompts); process.exit(1); }
              if (!global.__alerts.includes(expectedAlert))   { console.error('Bad alert', global.__alerts);   process.exit(1); }
              process.exit(0);
            "
          timeout: 20
          max-score: 50

      # ---- Test 2: circleArea() ----
      - name: 'circleArea() – r=5 → "Area of the circle: 78.54"'
        id: test_circle_area
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'circleArea() – r=5 → "Area of the circle: 78.54"'
          setup-command: echo "No setup"
          command: >
            node -e "
              // stub prompt/alert
              global.__prompts = [];
              global.prompt = (msg) => { global.__prompts.push(String(msg)); return '5'; };
              global.__alerts = [];
              global.alert  = (msg) => { global.__alerts.push(String(msg)); };

              // load student code into GLOBAL scope (no exports required)
              const fs = require('fs');
              const vm = require('vm');
              global.window = global;
              const code = fs.readFileSync('script.js', 'utf8');
              vm.runInThisContext(code, { filename: 'script.js' });

              // call & assert
              if (typeof circleArea !== 'function') { console.error('circleArea() not found'); process.exit(1); }
              circleArea();

              const expectedPrompt = 'Enter circle radius';
              const expectedAlert  = 'Area of the circle: 78.54';

              if (!global.__prompts.includes(expectedPrompt)) { console.error('Bad prompt', global.__prompts); process.exit(1); }
              if (!global.__alerts.includes(expectedAlert))   { console.error('Bad alert', global.__alerts);   process.exit(1); }
              process.exit(0);
            "
          timeout: 20
          max-score: 50

      # ---- Report back to GitHub Classroom (shows grades) ----
      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          TEST_CONVERT_TEMP_RESULTS: ${{ steps.test_convert_temp.outputs.result }}
          TEST_CIRCLE_AREA_RESULTS: ${{ steps.test_circle_area.outputs.result }}
        with:
          runners: test_convert_temp,test_circle_area
